{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ACE2 Alert Management System - GUI \u00b6 If you're looking for the main ACE documentation, check out the ace2-core docs .","title":"ACE2 Alert Management System - GUI"},{"location":"#ace2-alert-management-system-gui","text":"If you're looking for the main ACE documentation, check out the ace2-core docs .","title":"ACE2 Alert Management System - GUI"},{"location":"development/","text":"ACE2 GUI Development Guide \u00b6 Initial setup \u00b6 This project has VSCode devcontainer support to ensure that anyone working on the project does so in a consistent environment as well as follows the same formatting/styling guidelines. Required setup \u00b6 In order to work within the devcontainer, you will need the following installed on your system: Docker VSCode Remote Development VSCode extension pack NOTE: If you are developing in Windows, you will need to make sure that you have WSL 2 set up and properly configured with Docker. That is outside the scope of this documentation, but you can find steps here . Optional setup \u00b6 The end-to-end tests with Cypress can be executed within the devcontainer, but if you would like to use the Cypress Test Runner, it must run outside of the devcontainer on your local system. You will need to install: Node.js 16 After Node.js is installed, you will need to install Cypress on your local system: npm install -g cypress Working in the VSCode devcontainer \u00b6 When you open the project in VSCode, it will detect the devcontainer configuration and prompt you to reopen it inside of the container: Once you choose the Reopen in Container option, VSCode will work on building the environment. Once it is complete, you can open a terminal within VSCode to interact with the application: Any work done on the application should be done through the devcontainer. If you make a change to the devcontainer configuration (found in the .devcontainer directory), you can rebuild the devcontainer by clicking on Dev Container: ACE2 AMS GUI in the lower-left corner of VSCode and then selecting the Rebuild Container option in the menu that opens. Managing NPM packages \u00b6 You should not directly edit the dependencies or devDependencies inside of package.json or anything in package-lock.json . Any changes to packages should be performed inside of the devcontainer via the npm command : Install new dependency package \u00b6 You would install a package like this if it is something the final compiled application needs: npm install <package> Install new dev dependency package \u00b6 You would install a package like this if it is only needed during development: npm install -D <package> Uninstall package \u00b6 You can uninstall/remove a package regardless of how it was installed by: npm uninstall <package> Running tests \u00b6 This application has a suite of unit tests performed by Jest and end-to-end tests performed by Cypress . Unit tests \u00b6 You can execute the unit tests directly inside of the devcontainer: npm run test:unit End-to-end tests \u00b6 You can execute the end-to-end tests directly inside of the devcontainer: npm run test:e2e NOTE: The end-to-end tests will not work inside of the devcontainer if your host system is a Mac with the M1 processor. However, you will be able to run them as outlined below in the Test Runner section. Test Runner \u00b6 Cypress also comes with an amazing Test Runner that lets you see and interact with the tests in your local web browser. This can be helpful when writing end-to-end tests to ensure they are working properly as well as any debugging you might need to do. However, this will need to be performed on your local system ouside of the devcontainer. To do this, you will need to have Node.js 16 and Cypress installed on your local system . Step 1: Inside of the devcontainer, run the application so that it is available on port 8080: npm run serve Step 2: Outside of the devcontainer on your local system (but still inside of the project directory), open the Test Runner: cypress open For more information on what you can do with the Test Runner, view the Test Runner documentation .","title":"ACE2 GUI Development Guide"},{"location":"development/#ace2-gui-development-guide","text":"","title":"ACE2 GUI Development Guide"},{"location":"development/#initial-setup","text":"This project has VSCode devcontainer support to ensure that anyone working on the project does so in a consistent environment as well as follows the same formatting/styling guidelines.","title":"Initial setup"},{"location":"development/#required-setup","text":"In order to work within the devcontainer, you will need the following installed on your system: Docker VSCode Remote Development VSCode extension pack NOTE: If you are developing in Windows, you will need to make sure that you have WSL 2 set up and properly configured with Docker. That is outside the scope of this documentation, but you can find steps here .","title":"Required setup"},{"location":"development/#optional-setup","text":"The end-to-end tests with Cypress can be executed within the devcontainer, but if you would like to use the Cypress Test Runner, it must run outside of the devcontainer on your local system. You will need to install: Node.js 16 After Node.js is installed, you will need to install Cypress on your local system: npm install -g cypress","title":"Optional setup"},{"location":"development/#working-in-the-vscode-devcontainer","text":"When you open the project in VSCode, it will detect the devcontainer configuration and prompt you to reopen it inside of the container: Once you choose the Reopen in Container option, VSCode will work on building the environment. Once it is complete, you can open a terminal within VSCode to interact with the application: Any work done on the application should be done through the devcontainer. If you make a change to the devcontainer configuration (found in the .devcontainer directory), you can rebuild the devcontainer by clicking on Dev Container: ACE2 AMS GUI in the lower-left corner of VSCode and then selecting the Rebuild Container option in the menu that opens.","title":"Working in the VSCode devcontainer"},{"location":"development/#managing-npm-packages","text":"You should not directly edit the dependencies or devDependencies inside of package.json or anything in package-lock.json . Any changes to packages should be performed inside of the devcontainer via the npm command :","title":"Managing NPM packages"},{"location":"development/#install-new-dependency-package","text":"You would install a package like this if it is something the final compiled application needs: npm install <package>","title":"Install new dependency package"},{"location":"development/#install-new-dev-dependency-package","text":"You would install a package like this if it is only needed during development: npm install -D <package>","title":"Install new dev dependency package"},{"location":"development/#uninstall-package","text":"You can uninstall/remove a package regardless of how it was installed by: npm uninstall <package>","title":"Uninstall package"},{"location":"development/#running-tests","text":"This application has a suite of unit tests performed by Jest and end-to-end tests performed by Cypress .","title":"Running tests"},{"location":"development/#unit-tests","text":"You can execute the unit tests directly inside of the devcontainer: npm run test:unit","title":"Unit tests"},{"location":"development/#end-to-end-tests","text":"You can execute the end-to-end tests directly inside of the devcontainer: npm run test:e2e NOTE: The end-to-end tests will not work inside of the devcontainer if your host system is a Mac with the M1 processor. However, you will be able to run them as outlined below in the Test Runner section.","title":"End-to-end tests"},{"location":"development/#test-runner","text":"Cypress also comes with an amazing Test Runner that lets you see and interact with the tests in your local web browser. This can be helpful when writing end-to-end tests to ensure they are working properly as well as any debugging you might need to do. However, this will need to be performed on your local system ouside of the devcontainer. To do this, you will need to have Node.js 16 and Cypress installed on your local system . Step 1: Inside of the devcontainer, run the application so that it is available on port 8080: npm run serve Step 2: Outside of the devcontainer on your local system (but still inside of the project directory), open the Test Runner: cypress open For more information on what you can do with the Test Runner, view the Test Runner documentation .","title":"Test Runner"}]}